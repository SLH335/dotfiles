### Basic Settings ###

set shell sh
set shellopts '-eu'

set previewer ~/.config/lf/preview.sh
set sixel
set drawbox
set icons
set ignorecase

### Custom Functions ###

cmd mkdir %{{
	printf "Create Directory: "
	read ans
	mkdir -- $ans
	lf -remote "send $id select \"$ans\""
	lf -remote "send $id clear"
}}

cmd mkfile %{{
	printf "Create File: "
	read ans
	touch -- "$ans"
	lf -remote "send $id select \"$ans\""
	lf -remote "send $id clear"
}}

cmd trash &{{
   files=$(printf "$fx" | tr '\n' ';')
   failed=0
   failmsg=''
   while [ "$files" ]; do
      # extract the substring from start of string up to delimiter.
      # this is the first "element" of the string.
      file=${files%%;*}

      trash-put "$(basename "$file")"
      # if there's only one element left, set `files` to an empty string.
      # this causes us to exit this `while` loop.
      # else, we delete the first "element" of the string from files, and move onto the next.
      if [ "$files" = "$file" ]; then
         files=''
      else
         files="${files#*;}"
      fi
   done

   if (( $failed == 0 )); then
      lf -remote "send $id echo 'Moved to trash'"
   else
      lf -remote "send $id echo $failed files not moved to trash; last error msg"
   fi

   lf -remote "send $id :unselect; up; reload"
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
    esac
}}

# compress current file or selected files with tar and gzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd yank-dirname &dirname -- "%s" | head -c-1 | wl-copy
cmd yank-path &printf '%s' "$fx" | wl-copy
cmd yank-basename &basename -a -- $fx | head -c-1 | wl-copy

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

# Run every time directory changes
cmd on-cd &{{
	# Show current directory in window tile
	printf "\033]0;lf $(pwd | sed "s|$HOME|~|")\007" > /dev/tty

	# display git repository status in prompt
	source /usr/share/git/completion/git-prompt.sh
	GIT_PS1_SHOWDIRTYSTATE=auto
	GIT_PS1_SHOWSTASHSTATE=auto
	GIT_PS1_SHOWUNTRACKEDFILES=auto
	GIT_PS1_SHOWUPSTREAM=auto
	GIT_PS1_COMPRESSSPARSESTATE=auto
	git=$(__git_ps1 " on \033[35;1mî‚  %s") || true
	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m$git\033[0m"
	lf -remote "send $id set promptfmt \"$fmt\""
}}
on-cd # Run on startup

### Bindings ###

# Remove some defaults
map m
map "'"
map '"'

# Basic Functions
map <enter> open
map mf mkfile
map md mkdir
map DD trash
map D<delete> delete
map u $pwd | gdu
map O open_with
map R reload

# Archive Mappings
map au extract
map az zip
map at tar

# Dirname Mappings
map Yp yank-path
map Yd yank-dirname
map Yb yank-basename

map C edit-config

# Goto Mappings
map .<space> cd ~
map .- cd ~/Documents/dev
map .c cd ~/.config
map .d cd ~/Documents
map .D cd ~/Downloads
map .p cd ~/Documents/private
map .P cd ~/Pictures
map .s cd ~/Documents/school/gymnasium/sek-2
map .v cd ~/Videos
map ./ cd /
map .E cd /etc
map .U cd /usr
map .M cd /mnt
map .R cd /run/media
map .T cd /tmp

map - search
